def optimal_page_replacement(reference_string, frame_size):
    frames = [-1] * frame_size  # -1 indicates an empty frame
    page_faults = 0

    for i in range(len(reference_string)):
        if reference_string[i] not in frames:
            if -1 in frames:
                # If there is an empty frame, put the page in it
                empty_frame_index = frames.index(-1)
                frames[empty_frame_index] = reference_string[i]
            else:
                # Find the page that will not be used for the longest period in the future
                farthest_page_index = max(
                    (index for index, page in enumerate(frames) if page in reference_string[i + 1:]),
                    default=-1
                )

                # Replace the page with the farthest page
                frames[farthest_page_index] = reference_string[i]

            page_faults += 1

    return page_faults


if __name__ == "__main__":
    # User input for the number of pages
    num_pages = int(input("Enter the number of pages: "))

    # User input for the length of the reference string
    ref_string_length = int(input("Enter the length of the reference string: "))

    # User input for the frame size
    frame_size = int(input("Enter the frame size: "))

    # User input for the reference string
    print("Enter the reference string (space-separated numbers, each representing a page):")
    reference_string = list(map(int, input().split()))

    # Ensure that the reference string length matches the user's input
    if len(reference_string) != ref_string_length:
        print("Error: The length of the reference string does not match the specified length.")
    else:
        result = optimal_page_replacement(reference_string, frame_size)
        print(f"Number of Page Faults using OPR: {result}")
